package cs544.project.volunteer.controller;

import java.util.List;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import cs544.project.volunteer.domain.Project;
import cs544.project.volunteer.domain.Skill;
import cs544.project.volunteer.domain.Status;
import cs544.project.volunteer.service.IProjectService;
import cs544.project.volunteer.service.ISkillService;

@Controller
@RequestMapping(value = "/project")
public class ProjectController {

	@Autowired
	private IProjectService projectService;
	@Autowired
	private ISkillService skillService;

	@RequestMapping(value = "/add", method = RequestMethod.POST)
	public String createProject(@Valid Project project, BindingResult result, Model model) {
		if (!result.hasErrors()) {
			projectService.createProject(project);
			return "redirect:/project/find/" + project.getId();
		} else {
			model.addAttribute("errors", "No fields should be left empty");
			return "/project/add";
		}
	}

	@RequestMapping(value = "/newproject", method = RequestMethod.GET)
	public String newProjectPage() {
		return "newProject";
	}

	@RequestMapping(value = "/addSkill/{skid}/{pid}", method = RequestMethod.GET)
	public String addSkill(@PathVariable("skid") int sid, @PathVariable("pid") int pid) {
		Project project = projectService.findProject(pid);
		project.addSkill(skillService.findSkill(sid));
		projectService.updateProject(project);
		return "redirect:/project/find/" + pid;
	}

	@RequestMapping(value = "/status/{id}", method = RequestMethod.GET)
	public String changeStatus(@PathVariable("id") int id) {
		Project project = projectService.findProject(id);
		if (project.getStatus().equals(Status.OPEN)) {
			project.setStatus(Status.CLOSED);
		} else {
			project.setStatus(Status.OPEN);
		}
		projectService.updateProject(project);
		return "redirect:/project/find/" + id;
	}

	@RequestMapping(value = "/find/{id}", method = RequestMethod.GET)
	public String findProject(Model model, @PathVariable("id") int id) {
		Project project = projectService.findProject(id);
		List<Skill> skills = skillService.findSkillsToBeAdded(id);
		System.out.println("hello size" + skills.size());
		model.addAttribute("project", project);
		model.addAttribute("skills", skills);
		return "projectDetails";
	}

	@RequestMapping(value = "/list", method = RequestMethod.GET)
	public String allProjects(Model model) {
		model.addAttribute("projects", projectService.findAllProjects());
		return "projects";
	}

	@RequestMapping(value = "/volunteerPerProject/{id}", method = RequestMethod.GET)
	public String findProjectVolunteer(Model model, @PathVariable("id") int id) {
		Project project = projectService.findProject(id);
		model.addAttribute("project", project);
		return "volunteerPerProject";
	}

}
